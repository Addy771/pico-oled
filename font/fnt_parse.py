# TODO
# Delete .h file if it exists already to prevent weird partial files

import xml.etree.ElementTree as ET
import sys, os
from pathlib import Path


if len(sys.argv) < 2:
    print("No font path provided.")
    sys.exit()

# Open XML format .fnt file that was generated by BMFont
in_name = sys.argv[1]
tree = ET.parse(in_name)
root = tree.getroot()

# Get the entries for all chars
chars = root.find('chars')

# Get the common data for the font
common = root.find('common')
line_height = common.get('lineHeight')


# Create an output file
#font_name = in_name.split('.')[-1]
font_name = Path(in_name).stem
out_name =  font_name + '.h'

chars_string = ""
first_char = None
# Iterate through each character's data
for char in chars.findall('char'):
    print(f"ASCII:{char.get('id')}, x_pos={char.get('x')}")

    last_char = char.get('id')
    if first_char == None:
        first_char = last_char
    
    # {x_coord, char_width, char_height, x_advance, x_offset, y_offset},    // char: 'c'
    chars_string += f"\t{{{int(char.get('x')):4d}, {char.get('width')}, {char.get('height')}, {char.get('xadvance')}, {char.get('xoffset')}, {char.get('yoffset')}}},\t\t// {int(last_char):3d}: '{chr(int(last_char))}'\n"

    # calculate lower char value, highest char value
    


print(f"\nCreating output file '{out_name}' from input file '{in_name}'\n")

file_content = \
f"""/**
 *  {out_name}
 *  Generated by fnt_parse.py
 */
#include "../gfx_font.h"

 const uint8_t {font_name}_bitmaps[] = 
 {{

 }};


 const gfx_char {font_name}_chars[] = 
 {{
{chars_string}
 }};


 const gfx_font {font_name} = {{(uint8_t *){font_name}_bitmaps, (gfx_char *){font_name}_chars, {first_char}, {last_char}, {line_height}, <bitmap_table_width>}};

"""

out_file = os.open(out_name, os.O_WRONLY | os.O_CREAT)

os.write(out_file, bytes(file_content, 'utf-8'))
os.close(out_file)

input("Press Enter to continue...")
    
